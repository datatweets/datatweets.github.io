[{"content":"","date":"2024-09-07","id":0,"permalink":"/docs/python/","summary":"","tags":[],"title":"Python for Data Analytics"},{"content":"\rLearn Python for Data Analytics and Transform Your Career!\nWelcome to \u0026ldquo;Python for Data Analytics\u0026rdquo; Course Dive into the exciting world of data analytics with our free, open-access course! Designed for beginners and those looking to expand their skills, this course will teach you Python, one of the most versatile programming languages, along with powerful tools for data analysis and visualization.\nYou’ll gain hands-on experience with essential libraries like NumPy and Pandas for data manipulation and Matplotlib and Seaborn for creating stunning visualizations. By the end, you’ll confidently clean, analyze, and visualize data, ready to apply your skills to real-world challenges.\nOur practical approach emphasizes interactive learning with Jupyter Notebook, helping you build reusable functions, handle dates and times, and create frequency tables. Through clear explanations and engaging exercises, even complex concepts will feel manageable.\nBest of all, it’s completely free! Whether you’re aspiring to a career in data science or simply curious about Python and analytics, this course is your gateway to mastering data with confidence. Start your journey today!\nPython Basics Module\rExplore the fundamentals of Python\n","date":"2023-09-07","id":1,"permalink":"/docs/python/python-for-data-analytics-course/","summary":"\u003cdiv class=\"callout callout-tip d-flex flex-row mt-4 mb-4 pt-4 pe-4 pb-2 ps-3\"\u003e\r\n  \u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/rocket svg-inline callout-icon me-2 mb-3\" id=\"svg-rocket\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M4 13a8 8 0 0 1 7 7a6 6 0 0 0 3 -5a9 9 0 0 0 6 -8a3 3 0 0 0 -3 -3a9 9 0 0 0 -8 6a6 6 0 0 0 -5 3\" /\u003e\n  \u003cpath d=\"M7 14a6 6 0 0 0 -3 6a6 6 0 0 0 6 -3\" /\u003e\n  \u003cpath d=\"M15 9m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0\" /\u003e\n\u003c/svg\u003e\r\n  \u003cdiv class=\"callout-content\"\u003e\r\n    \u003cdiv class=\"callout-title\"\u003e\r\n        \u003cp\u003eLearn Python for Data Analytics and Transform Your Career!\u003c/p\u003e","tags":[],"title":"Python for Data Analytics Course"},{"content":"\r","date":"2023-09-07","id":2,"permalink":"/docs/python/python-basics/overview-of-the-python-basics-module/","summary":"\u003c!-- \r\n  \u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"/docs/python/python-basics/overview-of-the-python-basics-module/\" target=\"_self\" class=\"stretched-link text-reset text-decoration-none\"\u003eShowcase\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003eExplore the infinite possibilities of Doks\u003c/p\u003e","tags":[],"title":"Overview of the Python Basics Module"},{"content":"\rShowcase\rExplore the infinite possibilities of Doks\n","date":"2023-09-07","id":3,"permalink":"/docs/python/python-basics/","summary":"\u003cdiv class=\"card-nav d-flex flex-column flex-sm-row\"\u003e\r\n  \u003cdiv class=\"card text-end w-100\"\u003e\r\n    \u003cdiv class=\"card-body d-flex\"\u003e\r\n      \u003cdiv class=\"d-flex flex-column me-auto text-start\"\u003e\r\n        \u003ch5 class=\"card-title my-0\"\u003e\u003ca href=\"/docs/python/python-basics/lesson-1-introduction-to-python\" class=\"stretched-link text-reset text-decoration-none\"\u003eShowcase\u003c/a\u003e\u003c/h5\u003e\r\n        \u003cp class=\"card-text mt-1\"\u003eExplore the infinite possibilities of Doks\u003c/p\u003e\r\n      \u003c/div\u003e\r\n      \u003cdiv class=\"d-flex flex-column justify-content-center\"\u003e\r\n        \u003csvg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-arrow-right\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003e\r\n          \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"\u003e\u003c/path\u003e\r\n          \u003cpath d=\"M5 12l14 0\"\u003e\u003c/path\u003e\r\n          \u003cpath d=\"M13 18l6 -6\"\u003e\u003c/path\u003e\r\n          \u003cpath d=\"M13 6l6 6\"\u003e\u003c/path\u003e\r\n        \u003c/svg\u003e\r\n      \u003c/div\u003e\r\n    \u003c/div\u003e\r\n  \u003c/div\u003e\r\n  \u003c/div\u003e","tags":[],"title":"Python Basics"},{"content":"Laying the Foundation for Data Analytics This is your starting point for learning Python as a powerful tool for data analytics. Whether you are new to programming or already have some experience, this course and its lessons will help you understand how Python can assist in exploring and understanding data.\nAs you develop your Python skills, you’ll see how it can be used to manage, process, and analyze large amounts of information. You’ll also discover how artificial intelligence (AI) enhances data ecosystems, making it easier to spot trends and uncover insights.\nBy the end of this lesson, you will be able to:\nWrite a simple computer program in Python. Understand fundamental concepts like variables and data types. Use essential operations, including arithmetic and working with text. By the end of this course, you will know how to:\nStore values in variables and retrieve them later. Work with numbers and text data effectively. Load a large dataset into Python and explore what it contains. Use conditional logic to answer questions and guide decisions. No special background is needed—let’s get started!\nCommunicating with the Computer To analyze data efficiently, you need a way to tell the computer what to do. We do this by writing instructions, also known as programming. To program a computer, we use a programming language. Here, we’ll focus on Python, a language widely used in data analytics.\nLet’s try a simple task: tell Python to add two numbers, for example, 14 and 5. In your own coding environment, type:\nprint(14 + 5)\rWhen you run this code, Python will display 19.\nRunning the code in VS Code\rTry writing a similar line with different numbers and run it. This is your first step in directing the computer’s actions.\nShowing Multiple Outputs with print() You’re not limited to a single calculation. You can write multiple lines of code and display each result on its own line using the print() function.\nFor example:\nprint(14 + 5) print(10 - 2)\rWhen you run these instructions, you’ll see:\n19\r8\rBoth results appear because we used print() twice. Try writing two separate print() lines yourself. For one, perform an addition. For the other, try a subtraction. Run them and observe the two results.\nUnderstanding Python’s Syntax Each print() instruction should be on its own line. If you try to place two print() functions on the same line, you’ll get a syntax error. This happens because Python follows strict rules about how code is written, similar to how we follow grammar rules in spoken languages.\nLearning to read and fix errors is an important skill. Sometimes, tools like AI-based code assistants can help identify and correct syntax errors before you run your code.\nGive it a try: write three separate lines of code, each using print(). For instance:\nprint(20 + 10 + 5) print(3) print(-1)\rRun the code and check the output.\nWhat is a Program? When you write instructions in Python, those instructions together form code. Each line is called a line of code. A set of lines that work together to produce a result is known as a computer program.\nA program can be just one line or hundreds. When you run the code, the instructions (input) are processed, and the computer shows you the outcome (output).\nIf you don’t use print(), the result might not appear on the screen. For example:\n2 + 3 print(6 + 4)\rOnly 6 + 4 will be shown (as 10), because we told Python to print it.\nTry making a short three-line program where each line uses print(). For example:\nOn one line, show the result of 30 + 10. On another, show a single number, like 30. On the last line, show a negative number, like -30. Run your code and confirm that all three results appear.\nAdding Comments to Your Code The computer reads and runs code line by line. It ignores blank lines, which you can use for clarity. It also ignores anything that follows a # on the same line. Such text is known as a comment, and it helps you describe what your code does without affecting how it runs.\nFor example:\n# print(8 + 2) print(10 - 9)\rThe print(8 + 2) line is ignored because it comes after #.\nComments are useful for explaining tricky parts of the code or noting the purpose of a section. Try removing the # symbols in the following lines to make them run:\n# print(30 + 10) # print(30) # print(-30)\rAfter uncommenting them, run your code and see what happens.\nWorking with Arithmetic Operations So far, we have used addition and subtraction. Python can also handle multiplication, division, and exponentiation.\nMultiplication uses *:\nprint(5 * 4)\rOutput: 20\nDivision uses /:\nprint(12 / 4)\rOutput: 3.0\nExponentiation uses **:\nprint(3 ** 2)\rOutput: 9 (because 3 squared is 9).\nPython follows standard math rules: parentheses first, then exponents, then multiplication and division, and finally addition and subtraction.\nFor example:\nprint(6 + 2 * 10) print((6 + 2) * 10)\rRunning the code in VS Code\rThe first line results in 26 because multiplication happens before addition. The second gives 80 because (6 + 2) is calculated first.\nThese basic operations are fundamental for data analytics. They let you clean, transform, and summarize data, making it easier to analyze patterns and trends.\nTry writing three lines of code using print():\nOne line for multiplication (e.g., 12 * 7) One line for division (e.g., 40 / 8) One line for exponentiation (e.g., 2 ** 5) Run your code and check the results.\nLooking Ahead In this first lesson, you learned how to run basic Python instructions, display outputs, and use simple arithmetic operations. You also learned about the importance of following syntax rules and how comments can help explain code.\nAs you continue, you will build on these basics:\nLearn how to store data in variables for easier access. Work with numbers and text. Load larger datasets into Python and explore them. Apply conditional logic to answer questions and guide your analysis. With these skills, you will be better equipped to handle data and draw meaningful insights, making your journey in data analytics smoother and more productive.\n","date":"2023-09-07","id":4,"permalink":"/docs/python/python-basics/lesson-1-programming-in-python/","summary":"\u003ch2 id=\"laying-the-foundation-for-data-analytics\"\u003eLaying the Foundation for Data Analytics\u003c/h2\u003e\n\u003cp\u003eThis is your starting point for learning Python as a powerful tool for data analytics. Whether you are new to programming or already have some experience, this course and its lessons will help you understand how Python can assist in exploring and understanding data.\u003c/p\u003e","tags":[],"title":"Lesson 1 - Programming in Python"},{"content":"Building on Your Knowledge of Python Data Handling In this lesson, we’ll learn how to store values and work with both numerical and text data in Python. Knowing how to manage numbers and strings sets the groundwork for more advanced tasks, including data analytics and machine learning models. Before starting, it’s best if you already know how to write basic Python code and perform simple arithmetic operations.\nWe’ll begin by showing how to store the result of a calculation in a variable. For example, let’s consider the arithmetic expression (4 + 6) * 3. The result of this calculation is 30, and we can assign that value to a variable for later use.\nfinal_value = 30 print(final_value)\rOutput:\n30\rAlternatively, we can let Python do the math first and then store the outcome directly:\nfinal_value = (4 + 6) * 3 print(final_value)\rOutput:\n30\rWhen we run print(final_value), we see 30 because Python calculates (4 + 6) * 3 first, then stores 30 inside final_value.\nLet’s start with a quick exercise before moving on to explore variables in greater depth.\nExercise:\nCompute (50 - 8) * 4 and store the result in a variable named calc_result. Print the value of calc_result. Understanding Variables When we write something like:\nrecord_count = 30\rWe instruct Python to place the number 30 into a specific storage spot in the computer’s memory. Think of the computer’s memory as a huge grid of tiny storage boxes, each capable of holding a piece of information. By writing record_count = 30, we label one of these boxes with the name record_count and store 30 there.\nConcept Illustration: Imagine a large grid of storage locations (memory). Each spot can hold a piece of data. By assigning a value to a variable name, we place data in one of these spots and give it a recognizable label.\nOnce record_count holds 30, we can use it anywhere in our code:\nrecord_count = 30 print(record_count) print(record_count + 10)\rOutput:\n30\r40\rThe variable record_count serves as a handle to the value 30. When you run record_count + 10, Python fetches 30 from memory and computes 30 + 10 = 40.\nYou can choose any valid name for a variable:\nmy_number = 30 print(my_number) print(my_number + 10)\rOutput:\n30\r40\rExercise:\nAssign 12 to a variable called num_value. Compute (33 - 5) * 9 and store it in a variable named calc_result. Print the following: The value of num_value. The result of calc_result + 15. The sum of num_value and calc_result. Naming Your Variables Variable names must follow certain rules. For example, you can’t write:\nmy total = 100\rThis will cause a syntax error because spaces aren’t allowed in variable names.\nRules for Variable Names:\nUse only letters, digits, or underscores (_). Don’t start the name with a digit. Variable names are case sensitive. This means dataCount and DataCount would be considered different variables.\nValid and Invalid Variable Names:\nValid Names Invalid Names Reason Invalid data_set_2024 1_value Starts with a digit Sales_Summary new data Contains a space weekly_Stats item’s_price Contains an apostrophe Output_Results old-value Contains a hyphen _tempVar cost_in_$ Contains a $ character Exercise: In the code editor, these two lines are currently commented out:\n# old-profit = 34000 # new profit = 40000\rChange old-profit to old_profit. Change new profit to new_profit. Remove the # so the code runs without errors. Changing Stored Values We can update the value of a variable after we create it. For example:\ncount = 25 print(count) count = 60 print(count)\rOutput:\n25\r60\rWe can also update a variable using arithmetic:\ncount = 25 print(count) # Shows 25 print(count + 15) # Shows 40 (but does not update count itself) count = count + 15 print(count) # Now count is truly updated to 40\rOutput:\n25\r40\r40\rExercise:\nSuppose a variable named income is already defined in the code editor. Increase income by 5000 using income = income + 5000. Print income. Shortcut Operators Instead of writing x = x + 10, Python lets us use x += 10:\nx = 20 x += 10 print(x)\rOutput:\n30\rBelow is a table of shortcut operators you can use:\nShortcut Example Code Resulting Value += a = 5\na += 3 a becomes 8 -= b = 10\nb -= 2 b becomes 8 *= c = 4\nc *= 2 c becomes 8 /= d = 16\nd /= 4 d becomes 4.0 **= e = 3\ne **= 3 e becomes 27 If you try using these shortcuts on a variable that hasn’t been defined, you get a NameError. This is a runtime error (the code is syntactically correct, but logically it cannot proceed because the variable doesn’t exist yet).\nAlso note, the = operator in programming is not the same as the equals sign in mathematics. In Python, = means “assign the value on the right to the variable on the left.”\nExercise:\nAssign 10 to a variable named var_one. Assign 2.5 to a variable named var_two. Increase var_two by 5 using the += shortcut. Multiply var_one by 3 using the *= shortcut. Print both var_one and var_two. Working with Integers and Floats Integers (int) are whole numbers like 2, -5, 100. Floats (float) are numbers with decimal parts like 3.7 or -0.1.\nprint(4 + 1.2) print(type(4)) print(type(1.2))\rOutput:\n5.2\r\u0026lt;class \u0026#39;int\u0026#39;\u0026gt;\r\u0026lt;class \u0026#39;float\u0026#39;\u0026gt;\rBoth int and float are numeric types and can be mixed in arithmetic operations.\nExercise:\nAssign the integer 8 to a variable named num_a. Assign the float 3.4 to a variable named num_b. Add 2.6 to num_a (use +=). Multiply num_b by 2 (use *=). Print num_a and num_b. Converting Between Number Types We can convert integers to floats and vice versa:\nprint(float(7)) # Converts 7 to 7.0 print(int(9.9)) # Converts 9.9 to 9 (rounds down)\rOutput:\n7.0\r9\rFor more flexible rounding, use round():\nprint(round(9.9)) # rounds to 10 print(round(9.5)) # might round to 10 depending on Python\u0026#39;s rounding strategy\rChanging a variable’s value requires re-assignment:\nval = 3.8 print(round(val)) # Shows 4, but val is still 3.8 print(val) # Still 3.8 val = round(val) # Now val is truly 4 print(val) # Shows 4\rExercise:\nAssign 14.7 to var_x. Assign 2.4 to var_y. Round var_x and store the result back into var_x. Convert var_y to an integer and store it back into var_y. Print var_x and var_y. Introducing Strings Besides numbers, we often work with text in data analytics. Consider a dataset of apps:\napp_name price currency total_reviews avg_rating ChatterBox 0.0 USD 2,300,145 4.2 SnapFeed 0.0 USD 1,987,000 4.3 BattleLand 0.0 USD 2,150,900 4.5 RunSquare 0.0 USD 1,500,345 4.1 MusicCloud 0.0 USD 1,250,678 4.0 Text data like ChatterBox or USD is represented as a string (str). We create strings by putting characters between quotes:\napp_title = \u0026#34;ChatterBox\u0026#34; currency_code = \u0026#34;USD\u0026#34; print(app_title) print(currency_code)\rOutput:\nChatterBox\rUSD\rWe can use single or double quotes, but not both at once to define one string.\napp_one = \u0026#34;SnapFeed\u0026#34; app_two = \u0026#39;SnapFeed\u0026#39; print(app_one, app_two)\rOutput:\nSnapFeed SnapFeed\rStrings can contain letters, numbers, spaces, and symbols:\ndescription = \u0026#34;BattleLand is free with an average rating of 4.5\u0026#34; print(description)\rExercise:\nAssign \u0026quot;MusicCloud\u0026quot; to app_identity. Assign \u0026quot;4.0\u0026quot; to rating_str (note that this is a string, not a float). Assign \u0026quot;1250678\u0026quot; to reviews_str (a string, not an int). Assign \u0026quot;free\u0026quot; to cost_status. Print app_identity. Escaping Special Characters What if we need to use quotes inside a string?\nnote = \u0026#34;The CEO said, \u0026#39;We value creativity.\u0026#39;\u0026#34; print(note)\rOutput:\nThe CEO said, \u0026#39;We value creativity.\u0026#39;\rHere we used double quotes on the outside and single quotes inside. If we want to mix quotes more freely, we can use a backslash \\ to escape characters that would otherwise end the string:\nmessage = \u0026#39;Our slogan is \u0026#34;Think \\\u0026amp; Create\u0026#34;.\u0026#39; print(message)\rOutput:\nOur slogan is \u0026#34;Think \u0026amp; Create\u0026#34;.\rThe backslash \\ tells Python that the following character doesn’t end the string.\nExercise: Assign the string Meta's AI slogan is \u0026quot;Go. Innovate. Achieve.\u0026quot;. to a variable named tagline and then print it. Remember to handle the apostrophe in Meta's and the quotes around \u0026quot;Go. Innovate. Achieve.\u0026quot;.\nString Operations Strings can be combined (concatenated) using +:\nprint(\u0026#39;Hello\u0026#39; + \u0026#39;World\u0026#39;) print(\u0026#39;Hello\u0026#39; + \u0026#39; \u0026#39; + \u0026#39;World\u0026#39;)\rOutput:\nHelloWorld\rHello World\rWe can also repeat strings using *:\nprint(\u0026#39;Hi!\u0026#39; * 3)\rOutput:\nHi!Hi!Hi!\rNote that '4' + 1 will cause an error because you can’t add a string directly to a number. You must convert the string '4' to an integer or float first:\nprint(int(\u0026#39;4\u0026#39;) + 1)\rOutput:\n5\rWe can also turn numbers into strings:\nprint(str(4))\rOutput:\n4\rFor multi-line strings, use triple quotes:\ntext_block = \u0026#34;\u0026#34;\u0026#34;Line one Line two \u0026#39;Quotes\u0026#39; inside are fine here.\u0026#34;\u0026#34;\u0026#34; print(text_block)\rOutput:\nLine one\rLine two\r\u0026#39;Quotes\u0026#39; inside are fine here.\rExercise:\nAssign Platform's average rating is to platform_msg. Assign 3.7 (a float) to platform_rating. Convert platform_rating to a string and store it in platform_rating_str. Concatenate platform_msg with a space and platform_rating_str. Print the final result. Looking Ahead In this lesson, we covered:\nHow to store values in variables. How to work with integers and floats. How to handle text data (strings). How to convert between different data types. In the next lessons, we’ll explore more advanced programming concepts while examining even larger datasets with many rows and columns. Mastering variables, data types, and conversions now will prepare you for more complex data operations and analytics tasks ahead.\n","date":"2023-09-07","id":5,"permalink":"/docs/python/python-basics/lesson-2-variables-and-data-types/","summary":"\u003ch2 id=\"building-on-your-knowledge-of-python-data-handling\"\u003eBuilding on Your Knowledge of Python Data Handling\u003c/h2\u003e\n\u003cp\u003eIn this lesson, we’ll learn how to store values and work with both numerical and text data in Python. Knowing how to manage numbers and strings sets the groundwork for more advanced tasks, including data analytics and machine learning models. Before starting, it’s best if you already know how to write basic Python code and perform simple arithmetic operations.\u003c/p\u003e","tags":[],"title":"Lesson 2 - Variables and Data Types"},{"content":"In this lesson, you’ll learn how to work with data in Python using lists and loops. We’ll practice basic techniques to store information in lists, access data by indexing, slice lists to get specific segments, and use for loops to process large amounts of data quickly. We’ll also explore how to read a data file (in this case, PageGarden.csv) and transform it into a manageable structure for analysis.\nWhat is PageGarden.csv? PageGarden.csv (Download Here) is a fictional dataset representing an online bookstore called \u0026ldquo;PageGarden.\u0026rdquo; Each row in this dataset describes a single book. For example, each row might include:\nThe book title (text) The price (a number, e.g., 0.0 if it’s free) The currency (e.g., \u0026ldquo;USD\u0026rdquo;) The total number of customer reviews (a large integer) The average user rating (a floating-point number) A few sample rows from PageGarden.csv might look like this (note: this is sample data, not real):\ntitle,price,currency,total_reviews,avg_rating\r\u0026#34;Whispering Leaves\u0026#34;,12.99,USD,1050300,4.2\r\u0026#34;Berry Tales\u0026#34;,0.0,USD,985500,4.5\r\u0026#34;Moon Over Pine\u0026#34;,7.50,USD,899000,4.6\r\u0026#34;Desert Echoes\u0026#34;,15.00,USD,1724500,4.4\r\u0026#34;Golden Harvest\u0026#34;,9.99,USD,990000,4.3\rThe first row is called the “header” row. It describes what each column represents. Each subsequent row describes one book. For example, \u0026quot;Whispering Leaves\u0026quot; has: price = 12.99 currency = USD total_reviews = 1050300 avg_rating = 4.2 Over the course of these lessons, we’ll learn to read this file, store it in Python as a list of lists, and then perform simple data analysis tasks (like finding the average rating of all books).\nUnderstanding Lists When working with data, it’s essential to store and organize information in a way that’s easy to manage. One of the most basic and useful data structures in Python is the list.\nA list is a collection of items placed in a specific order and enclosed in square brackets [ ]. These items are often called “elements” of the list. Lists are very flexible because they can store elements of many different data types—such as text (strings), numbers (integers and floats), and even other lists.\nWhy use lists for this data? If we think about one book from our PageGarden.csv dataset, it has several pieces of information:\nThe title (e.g., \u0026quot;Whispering Leaves\u0026quot;) The price (e.g., 12.99) The currency (e.g., \u0026quot;USD\u0026quot;) The total number of reviews (e.g., 1050300) The average rating (e.g., 4.2) We could create a separate variable for each piece of information, like this:\ntitle = \u0026#34;Whispering Leaves\u0026#34; price = 12.99 currency = \u0026#34;USD\u0026#34; total_reviews = 1050300 avg_rating = 4.2\rBut imagine we had thousands of books! Creating so many variables would be messy and hard to manage.\nInstead, we can use a list to store all these pieces of information about one book together:\nbook_1 = [\u0026#34;Whispering Leaves\u0026#34;, 12.99, \u0026#34;USD\u0026#34;, 1050300, 4.2]\rNow, book_1 holds all the information for this single book in one place. We don’t have to keep track of multiple variables—just one list. This makes our code shorter, easier to read, and more scalable (meaning it’s easier to expand if we have more books).\nCheck the type:\nprint(book_1) print(type(book_1))\rprint(book_1) might show something like [\u0026quot;Whispering Leaves\u0026quot;, 12.99, \u0026quot;USD\u0026quot;, 1050300, 4.2]. print(type(book_1)) will confirm that book_1 is a list. How to create a list:\nWrite the elements separated by commas. Enclose them in square brackets. For example:\nsample_list = [\u0026#34;Hello\u0026#34;, 10, 3.5]\rHere:\n\u0026ldquo;Hello\u0026rdquo; (a string), 10 (an integer), and 3.5 (a float) are all stored together in one list named sample_list.\nExercise:\nCreate a list named book_2 that represents another book from our PageGarden data. Use the following details:\nTitle: \u0026quot;Berry Tales\u0026quot; Price: 0.0 Currency: \u0026quot;USD\u0026quot; Total reviews: 985500 Average rating: 4.5 In code:\nbook_2 = [\u0026#34;Berry Tales\u0026#34;, 0.0, \u0026#34;USD\u0026#34;, 985500, 4.5]\rCreate another list named book_3 for:\nTitle: \u0026quot;Moon Over Pine\u0026quot; Price: 7.50 Currency: \u0026quot;USD\u0026quot; Total reviews: 899000 Average rating: 4.6 book_3 = [\u0026#34;Moon Over Pine\u0026#34;, 7.50, \u0026#34;USD\u0026#34;, 899000, 4.6]\rThese two exercises will help you get comfortable with creating lists. In the next section, we’ll learn how to access elements inside these lists.\nAccessing Elements in a List (Indexing) Now that we know how to create a list, the next step is understanding how to access the information stored inside it. Since lists often contain multiple elements, we need a systematic way to identify and retrieve each piece of data. In Python, this system is called indexing.\nWhat is an index? An index is a numeric position assigned to each element in the list. Indexing in Python starts at 0 for the first element, 1 for the second, and so on. This zero-based indexing is a common feature in many programming languages.\nConsider our book_1 list from the previous section:\nbook_1 = [\u0026#34;Whispering Leaves\u0026#34;, 12.99, \u0026#34;USD\u0026#34;, 1050300, 4.2]\rLet’s write down the index numbers for each element:\nIndex 0 → \u0026quot;Whispering Leaves\u0026quot; Index 1 → 12.99 Index 2 → \u0026quot;USD\u0026quot; Index 3 → 1050300 Index 4 → 4.2 If we want just the book’s title, \u0026quot;Whispering Leaves\u0026quot;, we can access it by using its index:\ntitle = book_1[0] print(title) # This will print: Whispering Leaves\rTo access the average rating (which is at index 4):\nrating = book_1[4] print(rating) # This will print: 4.2\rWhy does indexing matter? Indexing lets you pick out exactly the piece of data you need from a list. This is especially useful when you’re dealing with many items. Imagine that PageGarden.csv has thousands of rows—indexing allows you to write generic code to handle each row without having to manually name variables for each piece of data.\nIndexing for Large Datasets Soon, we’ll load the entire PageGarden.csv file as a list of lists. Each sublist will represent one book’s data. With indexing, we can easily select which part of the data we need—like extracting all the ratings to find their average.\nImportant details about indexing:\nThe first element is always at index 0. If you try to access an index that doesn’t exist (for example, book_1[10]), Python will give you an IndexError because the index is out of range. You can use indexing with variables. For instance, if book_2 is [\u0026quot;Berry Tales\u0026quot;, 0.0, \u0026quot;USD\u0026quot;, 985500, 4.5], then book_2[3] will give you 985500 (the total number of reviews). Exercise:\nGiven the book_2 list:\nbook_2 = [\u0026#34;Berry Tales\u0026#34;, 0.0, \u0026#34;USD\u0026#34;, 985500, 4.5]\rExtract the total number of reviews and store it in a variable named berry_reviews. berry_reviews = book_2[3]\rPrint berry_reviews to confirm it’s 985500. Do the same for book_3:\nbook_3 = [\u0026#34;Moon Over Pine\u0026#34;, 7.50, \u0026#34;USD\u0026#34;, 899000, 4.6]\rExtract the average rating and store it in moon_rating. moon_rating = book_3[4]\rPrint moon_rating to confirm it’s 4.6. By practicing indexing, you’ll be better prepared to handle large datasets, where indexing is essential for selecting and using the right parts of your data. In the next section, we’ll explore a related concept called negative indexing, which allows you to access elements from the end of a list.\nNegative Indexing We’ve seen that we can use positive numbers (0, 1, 2, \u0026hellip;) to access elements in a list, starting from the front. In Python, there’s another helpful feature called negative indexing, which allows you to access elements from the end of the list backwards.\nHow does negative indexing work?\n-1 refers to the last element in the list. -2 refers to the second-to-last element. -3 refers to the third-to-last element, and so forth. This might seem unusual at first, but it’s a very convenient shortcut when you often need to access the last few elements of a list without knowing its exact length.\nLet’s revisit book_1:\nbook_1 = [\u0026#34;Whispering Leaves\u0026#34;, 12.99, \u0026#34;USD\u0026#34;, 1050300, 4.2]\rUsing positive indexing, book_1[4] gives us the average rating (4.2). Using negative indexing:\nlast_element = book_1[-1] print(last_element) # 4.2\rbook_1[-1] also returns 4.2, the last element of the list. It’s just another way to reach the same data.\nSimilarly, book_1[-2] would give us the second-to-last element:\nsecond_last = book_1[-2] print(second_last) # 1050300 (the total number of reviews)\rWhy use negative indexing?\nIf you’re always interested in the last element (like the most recent rating or the newest piece of data), negative indexing saves you from having to calculate the length of the list or remember which index number the last element has. For instance, when reading PageGarden.csv, if you want the last piece of data from each row (the average rating), you don’t need to know that it’s at index 4. You can just use [-1] to get it. Be careful with your indexing!\nNegative indexing starts at -1 (not -0, which doesn’t exist), so the last element is always [-1]. If you use an index that’s too far negative (like book_1[-10] when the list doesn’t have that many elements), you’ll get an IndexError just as you would with a positive index out of range. Exercise:\nUsing book_2 ([\u0026quot;Berry Tales\u0026quot;, 0.0, \u0026quot;USD\u0026quot;, 985500, 4.5]), retrieve the average rating using negative indexing and store it in berry_rating.\nberry_rating = book_2[-1] print(berry_rating) # Should print 4.5\rUsing book_3 ([\u0026quot;Moon Over Pine\u0026quot;, 7.50, \u0026quot;USD\u0026quot;, 899000, 4.6]), retrieve the total number of reviews using negative indexing. Hint: the total reviews are the second-to-last element.\nmoon_reviews = book_3[-2] print(moon_reviews) # Should print 899000\rWith these exercises, you’ll become comfortable using negative indexing to quickly access elements at the end of your lists—another handy tool when dealing with data from large datasets. Next, we’ll learn how to access multiple elements at once using a technique called slicing.\nRetrieving Multiple Elements (List Slicing) So far, we’ve focused on accessing single elements from a list using positive and negative indexing. But what if we need to retrieve more than one element at a time? For example, we might want to separate the title, price, and currency of a book from its review counts and ratings. Instead of accessing each element individually, Python lets us use slicing to extract a range of elements at once.\nWhat is slicing? Slicing allows you to specify a start and an end index, and Python will give you a new list containing all the elements between those two indices. The general syntax for slicing is:\na_list[start:end]\rstart is the index where the slice begins (inclusive). end is the index where the slice ends (exclusive, meaning it does not include the element at this index). For instance, consider our book_1 list again:\nbook_1 = [\u0026#34;Whispering Leaves\u0026#34;, 12.99, \u0026#34;USD\u0026#34;, 1050300, 4.2]\rThe indices for book_1 are:\n0 → \u0026ldquo;Whispering Leaves\u0026rdquo; 1 → 12.99 2 → \u0026ldquo;USD\u0026rdquo; 3 → 1050300 4 → 4.2 If we want the first three elements (title, price, and currency) in a separate list, we can do:\nfirst_three = book_1[0:3] print(first_three)\rThis will print:\n[\u0026#34;Whispering Leaves\u0026#34;, 12.99, \u0026#34;USD\u0026#34;]\rWe used [0:3] to get elements at indices 0, 1, and 2. Notice that the element at index 3 is not included because slicing stops just before the end index.\nSlicing shortcuts:\nIf we omit the start index, Python starts from the beginning of the list. For example, book_1[:3] is the same as book_1[0:3]. If we omit the end index, Python goes until the end of the list. For example, book_1[2:] would give us all elements starting from index 2 through the end of the list. If we use book_1[:], we get a copy of the entire list. Why slicing is useful: When we start working with the full PageGarden.csv as a list of lists, slicing becomes a powerful way to grab certain segments of our data. For instance, if each row has many columns and we only need the first few for a specific analysis, slicing makes this easy.\nAnother example: If book_2 = [\u0026quot;Berry Tales\u0026quot;, 0.0, \u0026quot;USD\u0026quot;, 985500, 4.5] and we want just the price and currency, we know these are at indices 1 and 2:\nprice_currency = book_2[1:3] print(price_currency) # This will print: [0.0, \u0026#34;USD\u0026#34;]\rExercise:\nUsing book_1, create a slice named metadata_1 that contains only the title, price, and currency.\nmetadata_1 = book_1[:3] print(metadata_1) # [\u0026#34;Whispering Leaves\u0026#34;, 12.99, \u0026#34;USD\u0026#34;]\rUsing book_3 = [\u0026quot;Moon Over Pine\u0026quot;, 7.50, \u0026quot;USD\u0026quot;, 899000, 4.6], create a slice named rating_info that contains only the total number of reviews and the rating.\nrating_info = book_3[3:] print(rating_info) # [899000, 4.6]\rBy practicing slicing, you’ll be able to quickly and easily extract the exact pieces of data you need. In the next section, we’ll discover how to store many rows of data (like multiple books) in a single list, making it even simpler to manage large datasets.\nStoring Multiple Rows of Data (Lists of Lists) So far, we’ve treated each book’s data as a single list with five elements: title, price, currency, total reviews, and average rating. But what if we have many books? Manually creating a separate variable for each book (like book_1, book_2, book_3, and so on) can quickly become overwhelming.\nInstead, we can store all these individual lists inside another list, creating what is commonly known as a list of lists. This structure makes it easy to handle larger datasets, like the entire PageGarden.csv file, which might contain thousands of books.\nWhy a list of lists?\nIf book_1 represents the first row, book_2 the second, book_3 the third, and so on, we can combine them into a single list called library_data.\nEach element of library_data would be one of these smaller lists. For example:\nbook_1 = [\u0026#34;Whispering Leaves\u0026#34;, 12.99, \u0026#34;USD\u0026#34;, 1050300, 4.2] book_2 = [\u0026#34;Berry Tales\u0026#34;, 0.0, \u0026#34;USD\u0026#34;, 985500, 4.5] book_3 = [\u0026#34;Moon Over Pine\u0026#34;, 7.50, \u0026#34;USD\u0026#34;, 899000, 4.6] library_data = [book_1, book_2, book_3]\rNow library_data looks like this:\n[ [\u0026#34;Whispering Leaves\u0026#34;, 12.99, \u0026#34;USD\u0026#34;, 1050300, 4.2], [\u0026#34;Berry Tales\u0026#34;, 0.0, \u0026#34;USD\u0026#34;, 985500, 4.5], [\u0026#34;Moon Over Pine\u0026#34;, 7.50, \u0026#34;USD\u0026#34;, 899000, 4.6] ]\rHow do we use indexing here?\nlibrary_data[0] would give you the entire book_1 list. library_data[1] would give you the entire book_2 list, and so on. If we want to retrieve the title of the second book (\u0026quot;Berry Tales\u0026quot;), we can do:\nsecond_book = library_data[1] # [\u0026#34;Berry Tales\u0026#34;, 0.0, \u0026#34;USD\u0026#34;, 985500, 4.5] second_title = library_data[1][0] # \u0026#34;Berry Tales\u0026#34;\rNotice how we used two indices here:\nlibrary_data[1] to select the second list (the second book), [0] to select the first element of that list (the title). This concept of using multiple indices in a row is called chained indexing, and it’s extremely useful for working with more complex data structures.\nAdvantages of lists of lists:\nYou can loop through library_data to process every book at once. You can easily select individual pieces of data from any book by combining indexing and slicing. As we’ll see later, this structure is perfect for reading in data from files, like PageGarden.csv, directly into Python. Exercise:\nCreate a library_data list of lists from the three book lists you’ve already defined:\nlibrary_data = [book_1, book_2, book_3]\rPrint library_data to see how it looks.\nRetrieve the average rating of the third book using chained indexing. For book_3 = [\u0026quot;Moon Over Pine\u0026quot;, 7.50, \u0026quot;USD\u0026quot;, 899000, 4.6], the rating is at index 4.\nthird_rating = library_data[2][4] print(third_rating) # Should print 4.6\rBy organizing data this way, handling more rows becomes much simpler. In the next section, we’ll start learning how to read data directly from a file and transform it into a list of lists, just like we did by hand.\nOpening and Reading a Data File Up to this point, we’ve been manually creating lists for each book. In a real-world scenario, you’ll often receive data in the form of a file rather than typing it out yourself. Python makes it possible to open and read files so that you can transform their contents into lists and then analyze the data.\nThe PageGarden.csv file Recall that PageGarden.csv is a file (a text document) containing many rows of data about books. Each row is structured as follows:\ntitle,price,currency,total_reviews,avg_rating\rFor example:\n\u0026#34;Whispering Leaves\u0026#34;,12.99,USD,1050300,4.2\r\u0026#34;Berry Tales\u0026#34;,0.0,USD,985500,4.5\r\u0026#34;Moon Over Pine\u0026#34;,7.50,USD,899000,4.6\r...\rThe first row is the header row, which describes what each column represents. Every subsequent row describes one book. When we read the file into Python, our goal is to end up with a list of lists—one sublist per book—just like library_data but on a much larger scale.\nHow to open a file in Python: You can use the built-in open() function to open a file. For example:\nopened_file = open(\u0026#34;PageGarden.csv\u0026#34;)\ropen(\u0026quot;PageGarden.csv\u0026quot;) tries to find a file named \u0026ldquo;PageGarden.csv\u0026rdquo; in the same directory (folder) where your Python code is running. The result is something called a “file object,” which we store in opened_file. Reading the file’s contents: After opening the file, you can read its entire contents into a single string using the read() method:\nfile_contents = opened_file.read()\rfile_contents will now contain the entire text of PageGarden.csv in one long string. This includes the header row and all the data rows, separated by newline characters (\\n). What does file_contents look like? If you print file_contents[:300], you’ll see the first 300 characters. This helps you verify that you’re reading the file correctly. It might look like this:\ntitle,price,currency,total_reviews,avg_rating\r\u0026#34;Whispering Leaves\u0026#34;,12.99,USD,1050300,4.2\r\u0026#34;Berry Tales\u0026#34;,0.0,USD,985500,4.5\r...\rClosing the file: When you finish reading the file, it’s good practice to close it:\nopened_file.close()\rThis frees up resources on your computer. Even though Python often does this automatically when your program ends, it’s a good habit to close files after you’re done with them.\nWhy read into a string first? Right now, we have all the data in one long string. That’s not very convenient for analysis. In the next sections, we’ll learn how to break this string apart—first into separate rows, and then into separate columns—so that we can build a list of lists. Once we have a list of lists, we can use all the indexing and slicing techniques we’ve practiced to analyze the dataset.\nExercise:\nOpen the PageGarden.csv file and store the file object in a variable named opened_file. Read the file’s contents into a variable named file_contents. Print out the first 200 characters of file_contents to check that it worked. Close the file. Example:\nopened_file = open(\u0026#34;PageGarden.csv\u0026#34;) file_contents = opened_file.read() print(file_contents[:200]) opened_file.close()\rIf everything’s working correctly, you’ll see the header row followed by some of the data. In the next section, we’ll learn how to split the string into rows and eventually convert those rows into lists.\nFrom a Single String to Separate Rows We now have the entire contents of PageGarden.csv stored in a single string. While this is a good start, having all the data in one long string isn’t very convenient for analysis. Our next goal is to break this large string into smaller, more manageable pieces.\nRemember the structure of the CSV file:\ntitle,price,currency,total_reviews,avg_rating\r\u0026#34;Whispering Leaves\u0026#34;,12.99,USD,1050300,4.2\r\u0026#34;Berry Tales\u0026#34;,0.0,USD,985500,4.5\r\u0026#34;Moon Over Pine\u0026#34;,7.50,USD,899000,4.6\r...\rEach line represents a different row of data. The first line is the header row, and each subsequent line describes one book.\nSplitting by newline characters: Inside the string, each new line of the file is represented by a special character called a newline (\\n). If we “split” the string whenever we encounter a \\n, we get a list where each element is one line of the file.\nFor example:\n# Assume file_contents contains the entire CSV data as one string. rows = file_contents.split(\u0026#34;\\n\u0026#34;)\rAfter this step, rows is a list where: rows[0] is the header: \u0026quot;title,price,currency,total_reviews,avg_rating\u0026quot; rows[1] is the first book’s data: \u0026quot;Whispering Leaves\u0026quot;,12.99,USD,1050300,4.2\u0026quot; rows[2] is the second book’s data: \u0026quot;Berry Tales\u0026quot;,0.0,USD,985500,4.5\u0026quot; and so forth. Why is this helpful? Now that we have each row as a separate string, it’s easier to work with. We can:\nInspect individual rows to understand the data better. Further split each row by commas to separate the columns. Remove the header row if we only need to analyze the data. Check the result: You can print the first few rows to see what they look like:\nprint(rows[:5]) # This prints the first five rows (including the header)\rYou should see something like:\n[\r\u0026#34;title,price,currency,total_reviews,avg_rating\u0026#34;,\r\u0026#34;\\\u0026#34;Whispering Leaves\\\u0026#34;,12.99,USD,1050300,4.2\u0026#34;,\r\u0026#34;\\\u0026#34;Berry Tales\\\u0026#34;,0.0,USD,985500,4.5\u0026#34;,\r\u0026#34;\\\u0026#34;Moon Over Pine\\\u0026#34;,7.50,USD,899000,4.6\u0026#34;,\r...\r]\rDealing with extra newline characters: Sometimes, CSV files may have blank lines at the end or in between. If that happens, you might get empty strings in your rows list. You can filter them out using techniques we’ll learn later, or just be aware that they can appear and handle them gracefully.\nNext steps: Now that we’ve split the data by lines, our next goal is to split each line by commas so that each line becomes a list of individual values. Eventually, we’ll transform this into a list of lists—one list per book—making it easy to perform calculations like average ratings across all books.\nExercise:\nAssuming you have file_contents from the previous step, split it into rows by using: rows = file_contents.split(\u0026#34;\\n\u0026#34;)\rPrint the first three rows (rows[:3]) to inspect the data. Look at rows[0] and identify the headers. Look at rows[1] and identify which parts represent the title, price, currency, total reviews, and average rating. This process transforms an unstructured string into a list of rows—bringing us one step closer to a clean, easily analyzable data structure. Next, we’ll tackle splitting each row into individual columns.\nSplitting Rows into Columns We’ve successfully split our large string into individual rows, each of which is still just one long piece of text. Remember, each row of the CSV file follows the same pattern:\n\u0026#34;title\u0026#34;,\u0026#34;price\u0026#34;,\u0026#34;currency\u0026#34;,\u0026#34;total_reviews\u0026#34;,\u0026#34;avg_rating\u0026#34;\r\u0026#34;Whispering Leaves\u0026#34;,12.99,USD,1050300,4.2\r\u0026#34;Berry Tales\u0026#34;,0.0,USD,985500,4.5\r\u0026#34;Moon Over Pine\u0026#34;,7.50,USD,899000,4.6\r...\rWithin each row, the values are separated by commas. If we can split each row by the comma character (\u0026quot;,\u0026quot;), we can isolate the individual pieces of data (title, price, currency, total reviews, and avg_rating) and store them in a list. Ultimately, this will give us a list of lists, where each inner list corresponds to one book.\nHow to split by commas: If rows is a list of strings, where each element is one row of the file, we can select a specific row and split it again:\nfirst_data_row = rows[1] # For example, \u0026#34;\\\u0026#34;Whispering Leaves\\\u0026#34;,12.99,USD,1050300,4.2\u0026#34; columns = first_data_row.split(\u0026#34;,\u0026#34;) print(columns)\rAfter splitting by the comma, columns might look like this:\n[\u0026#39;\u0026#34;Whispering Leaves\u0026#34;\u0026#39;, \u0026#39;12.99\u0026#39;, \u0026#39;USD\u0026#39;, \u0026#39;1050300\u0026#39;, \u0026#39;4.2\u0026#39;]\rNotice that the title is surrounded by quotation marks and appears as '\u0026quot;Whispering Leaves\u0026quot;'. The other values look cleaner. We’ll later learn how to remove these quotes or handle them. For now, the important part is that we have successfully broken the row into separate pieces.\nDoing this for all rows: Eventually, we’ll loop over each element in rows (except the header) and split by commas to turn every row into a list of values. This will give us a structure like:\n[ [\u0026#39;title\u0026#39;, \u0026#39;price\u0026#39;, \u0026#39;currency\u0026#39;, \u0026#39;total_reviews\u0026#39;, \u0026#39;avg_rating\u0026#39;], [\u0026#39;\u0026#34;Whispering Leaves\u0026#34;\u0026#39;, \u0026#39;12.99\u0026#39;, \u0026#39;USD\u0026#39;, \u0026#39;1050300\u0026#39;, \u0026#39;4.2\u0026#39;], [\u0026#39;\u0026#34;Berry Tales\u0026#34;\u0026#39;, \u0026#39;0.0\u0026#39;, \u0026#39;USD\u0026#39;, \u0026#39;985500\u0026#39;, \u0026#39;4.5\u0026#39;], [\u0026#39;\u0026#34;Moon Over Pine\u0026#34;\u0026#39;, \u0026#39;7.50\u0026#39;, \u0026#39;USD\u0026#39;, \u0026#39;899000\u0026#39;, \u0026#39;4.6\u0026#39;], ... ]\rHeader vs. Data Rows:\nThe first row (rows[0]) is the header row. It shows column names rather than data about a specific book. From rows[1] onwards, we have data rows representing individual books. When we start analyzing the data, we may not need the header row. Often, data analysts store the header row separately and then focus on the data rows when performing calculations.\nNext steps: Once we have each row split into columns, we can:\nConvert numeric values (like total_reviews and avg_rating) from strings into integers or floats. Clean up any extra characters (like quotation marks). Perform calculations, such as finding the average rating of all books. Exercise:\nSelect a data row, for example row = rows[1]. Split row by commas: columns = row.split(\u0026#34;,\u0026#34;) print(columns)\rIdentify which elements correspond to the title, price, currency, total reviews, and rating. Print out the columns list to confirm that the data is now separated into individual strings. By splitting each row into columns, we now have the building blocks we need to create a full list of lists structure—one step closer to straightforward data analysis. In the next lesson, we’ll transform all rows, not just one, into lists of columns and combine them into a single data structure.\nConverting All Rows into a List of Lists We now know how to transform one row of CSV data into a list of individual values by splitting on commas. The next step is to apply this process to every row in rows to create a list of lists—a structure where each element is a small list representing one book’s data.\nWhat we have so far:\nrows: a list of strings, where each string is one line from PageGarden.csv. The first element of rows (rows[0]) is the header: \u0026quot;title,price,currency,total_reviews,avg_rating\u0026quot;. Each subsequent element (like rows[1], rows[2], etc.) is a data row, something like: \u0026quot;\\\u0026quot;Whispering Leaves\\\u0026quot;,12.99,USD,1050300,4.2\u0026quot; Our goal:\nTurn each row into a list of values by splitting it on \u0026quot;,\u0026quot;. Collect all these lists into a single variable, such as apps_data or library_data. After we do this, we’ll end up with something like: [ [\u0026#39;title\u0026#39;, \u0026#39;price\u0026#39;, \u0026#39;currency\u0026#39;, \u0026#39;total_reviews\u0026#39;, \u0026#39;avg_rating\u0026#39;], [\u0026#39;\u0026#34;Whispering Leaves\u0026#34;\u0026#39;, \u0026#39;12.99\u0026#39;, \u0026#39;USD\u0026#39;, \u0026#39;1050300\u0026#39;, \u0026#39;4.2\u0026#39;], [\u0026#39;\u0026#34;Berry Tales\u0026#34;\u0026#39;, \u0026#39;0.0\u0026#39;, \u0026#39;USD\u0026#39;, \u0026#39;985500\u0026#39;, \u0026#39;4.5\u0026#39;], [\u0026#39;\u0026#34;Moon Over Pine\u0026#34;\u0026#39;, \u0026#39;7.50\u0026#39;, \u0026#39;USD\u0026#39;, \u0026#39;899000\u0026#39;, \u0026#39;4.6\u0026#39;], ... ]\rThis structure is much easier to work with because now we can loop over it, access individual elements with indexing, and convert numbers from strings to floats or integers as needed.\nHow to do this conversion:\nInitialize an empty list to store all the rows:\ndata_as_lists = []\rLoop over each element in rows. For each row in rows:\nSplit the row by commas to get a list of values. Append that list of values to data_as_lists. For example:\ndata_as_lists = [] for row in rows: columns = row.split(\u0026#34;,\u0026#34;) data_as_lists.append(columns)\rAfter the loop finishes, data_as_lists[0] should be the header row as a list, and data_as_lists[1] should be the first book’s data as a list, etc.\nInspecting the result:\nPrint len(data_as_lists) to see how many rows (including the header) you have. Print data_as_lists[0] to see the header row as a list. Print data_as_lists[1] to see the first book’s data as a list. Cleaning and conversion: Notice that some of the values may still have quotation marks (like '\u0026quot;Whispering Leaves\u0026quot;') and all numeric values (like '1050300' and '4.2') are still strings. In future steps, we’ll handle this by removing unwanted characters and converting numbers from strings to the appropriate numeric types. For now, focus on verifying that you have a list of lists structure.\nExercise:\nCreate an empty list called data_as_lists. Loop through all the rows in rows and split each row into columns. Append each list of columns to data_as_lists. Print the first five elements of data_as_lists to confirm that the transformation worked correctly. By completing this task, you are turning a raw CSV file into a structured Python data variable that’s ready for analysis. In the next sections, we’ll learn how to work with this data more effectively, including cleaning up unwanted characters, converting types, and eventually calculating interesting metrics like the average rating of all books.\nCleaning and Converting Data Types Now that we have data_as_lists, a list of lists where each inner list represents one row from PageGarden.csv, we need to clean and prepare this data for analysis. Two common tasks at this stage are:\nRemoving unwanted characters, like extra quotation marks in titles. Converting numeric values (like total reviews and average rating) from strings to integers or floats, so we can perform calculations. Why do we need to do this?\nIf we leave the quotation marks in titles, it might be harder to display the data nicely or match it against other information. If we keep numbers as strings, we can’t easily add them up, find their averages, or perform other mathematical operations. Example: Titles with quotes If the title appears as '\u0026quot;Whispering Leaves\u0026quot;', we may want to remove the extra quotes. There are several ways to clean strings in Python, one simple approach is to use the strip() method to remove leading and trailing characters:\ntitle = \u0026#39;\u0026#34;Whispering Leaves\u0026#34;\u0026#39; clean_title = title.strip(\u0026#39;\u0026#34;\u0026#39;) print(clean_title) # \u0026#34;Whispering Leaves\u0026#34;\rThis removes any \u0026quot; characters from the start and end of the string, leaving you with a cleaner title.\nConverting numeric values Right now, values like '1050300' or '4.2' are stored as strings. To work with them as numbers:\nUse int() for whole numbers (like total reviews). Use float() for decimal numbers (like average rating). For example:\nreviews_str = \u0026#34;1050300\u0026#34; reviews_int = int(reviews_str) print(reviews_int) # 1050300 as an integer rating_str = \u0026#34;4.2\u0026#34; rating_float = float(rating_str) print(rating_float) # 4.2 as a float, now we can do arithmetic\rApplying this to the dataset:\nThe header row is probably fine as strings since it’s just column names. For each data row, we might do something like: row = [\u0026#39;\u0026#34;Whispering Leaves\u0026#34;\u0026#39;, \u0026#39;12.99\u0026#39;, \u0026#39;USD\u0026#39;, \u0026#39;1050300\u0026#39;, \u0026#39;4.2\u0026#39;] # Clean the title row[0] = row[0].strip(\u0026#39;\u0026#34;\u0026#39;) # Convert price to float row[1] = float(row[1]) # Currency is fine as a string (no conversion needed) # Convert total reviews to int row[3] = int(row[3]) # Convert avg_rating to float row[4] = float(row[4]) print(row) # [\u0026#34;Whispering Leaves\u0026#34;, 12.99, \u0026#34;USD\u0026#34;, 1050300, 4.2]\rAfter these conversions, the data is in a much better format for analysis. You can now easily sum up ratings, calculate averages, and sort the data based on numeric values.\nExercise:\nSelect a row from data_as_lists (other than the header). For example: example_row = data_as_lists[1]\rClean the title by removing extra quotes. Convert the price and avg_rating to floats. Convert total_reviews to an integer. Print the cleaned and converted row to confirm the changes. By cleaning and converting the data, you’ve made it ready for analysis. In the next sections, you’ll learn how to loop over the entire dataset to apply these transformations to every row, and then start performing calculations like finding the average rating across all books.\nApplying Transformations to the Entire Dataset Now that you understand how to clean and convert data for a single row, it’s time to apply these steps to every row in the dataset. This is where the power of loops really shines. Instead of manually cleaning each row, you can write a loop to process all the rows automatically.\nWhat needs to be done for each row?\nSkip the header row, since it doesn’t contain numerical data. Remove any unwanted quotation marks from the title. Convert the price and average rating from strings to floats. Convert the total number of reviews from a string to an integer. After this process, every data row in data_as_lists will be in a uniform, clean format, which makes analysis much simpler.\nExample:\n# Assuming data_as_lists looks like this (simplified): # [ # [\u0026#39;title\u0026#39;, \u0026#39;price\u0026#39;, \u0026#39;currency\u0026#39;, \u0026#39;total_reviews\u0026#39;, \u0026#39;avg_rating\u0026#39;], # [\u0026#39;\u0026#34;Whispering Leaves\u0026#34;\u0026#39;, \u0026#39;12.99\u0026#39;, \u0026#39;USD\u0026#39;, \u0026#39;1050300\u0026#39;, \u0026#39;4.2\u0026#39;], # [\u0026#39;\u0026#34;Berry Tales\u0026#34;\u0026#39;, \u0026#39;0.0\u0026#39;, \u0026#39;USD\u0026#39;, \u0026#39;985500\u0026#39;, \u0026#39;4.5\u0026#39;], # ... # ] # We start looping from index 1 to skip the header row at index 0. for i in range(1, len(data_as_lists)): row = data_as_lists[i] # Clean the title row[0] = row[0].strip(\u0026#39;\u0026#34;\u0026#39;) # Convert price to float row[1] = float(row[1]) # Currency stays as is (string) # Convert total_reviews to int row[3] = int(row[3]) # Convert avg_rating to float row[4] = float(row[4])\rAfter running this loop, every row in data_as_lists (except the header) will be cleaned and converted into the correct data types. Now data_as_lists might look like this:\n[ [\u0026#39;title\u0026#39;, \u0026#39;price\u0026#39;, \u0026#39;currency\u0026#39;, \u0026#39;total_reviews\u0026#39;, \u0026#39;avg_rating\u0026#39;], [\u0026#39;Whispering Leaves\u0026#39;, 12.99, \u0026#39;USD\u0026#39;, 1050300, 4.2], [\u0026#39;Berry Tales\u0026#39;, 0.0, \u0026#39;USD\u0026#39;, 985500, 4.5], [\u0026#39;Moon Over Pine\u0026#39;, 7.50, \u0026#39;USD\u0026#39;, 899000, 4.6], ... ]\rWhy do this for the entire dataset? Having your entire dataset properly formatted means you can now:\nCalculate statistics, like the average rating for all books. Sort the data by total reviews or rating. Filter the data to find books above or below certain thresholds. All of these tasks require your data to be in a consistent and numeric-friendly format, which is exactly what this step achieves.\nExercise:\nWrite a loop that starts from i = 1 and goes through all the rows of data_as_lists. For each row: Clean the title by stripping quotes. Convert the price and avg_rating to floats. Convert total_reviews to an int. After the loop, print a few rows from data_as_lists to ensure the changes took effect. With this transformation step completed, your dataset is now truly ready for data analysis. In the next sections, we’ll learn how to utilize these clean values to derive meaningful insights, like computing averages and other statistics from the data.\nCalculating the Average Rating Now that your data is clean and each book’s rating is stored as a float, you can start performing calculations. One of the simplest and most common tasks is to find the average rating of all the books in the dataset. This is a straightforward operation now that ratings are numeric values (floats).\nHow to calculate an average:\nSum all the ratings. Divide the sum by the number of ratings. If you want the average rating of all books:\nMake sure to skip the header row, since it doesn\u0026rsquo;t contain ratings. Loop over each data row. Extract the rating from the appropriate index (for our dataset, this should be at index 4). Add it to a running total. After processing all rows, divide the total by the number of rows (excluding the header). Example:\n# data_as_lists is already cleaned and converted # data_as_lists[0] is the header row # data_as_lists[1:] is all the book data rating_sum = 0 count = 0 for i in range(1, len(data_as_lists)): row = data_as_lists[i] rating = row[4] # avg_rating is at index 4 rating_sum += rating count += 1 avg_rating = rating_sum / count print(\u0026#34;Average rating:\u0026#34;, avg_rating)\rWhat next? With the average rating, you have a measure of how the books in the PageGarden.csv dataset generally perform according to user reviews. You can apply similar techniques to find:\nThe average price of books. The minimum or maximum number of reviews. The most common currency (if the dataset had multiple currencies). Exercise:\nUsing your cleaned data_as_lists, calculate the average rating of all books. Print out the result. By doing this, you’ve taken raw data from a file, turned it into a manageable structure, cleaned and converted it, and finally performed a calculation that yields a meaningful insight about the dataset. In the next section, we’ll wrap up what we’ve learned and look ahead to more advanced techniques.\nNext Steps In this lesson, you learned:\nHow to store related data points in lists. How to access elements and slices within a list. How to use for loops for repetitive tasks. How to read file data and transform it into lists of lists. How to compute averages from large datasets. These skills lay the groundwork for more sophisticated data analysis techniques. As you move forward, you’ll discover new data structures, learn about filtering and sorting data, and eventually explore how these fundamentals link to more advanced analytical tasks, including working alongside AI-driven tools.\nBy mastering lists and loops now, you’re building a strong foundation for all your future data analysis endeavors.\n","date":"2024-12-07","id":6,"permalink":"/docs/python/python-basics/lesson-3-lists-and-for-loops/","summary":"This lesson introduces lists, indexing, slicing, and for loops in Python, and shows how to read and process a large dataset efficiently.","tags":[],"title":"Lesson 3 - Lists and For Loops"},{"content":"In this guide, you will learn how to set up PostgreSQL 14.7 on your MacBook using Homebrew, a widely-used package manager for macOS. The steps are straightforward and include:\nDetails\rSomething small enough to escape casual notice. ","date":"2023-09-07","id":7,"permalink":"/docs/python/python-basics/lesson-4-introduction-to-python/","summary":"\u003cp\u003eIn this guide, you will learn how to set up PostgreSQL 14.7 on your MacBook using Homebrew, a widely-used package manager for macOS. The steps are straightforward and include:\u003c/p\u003e","tags":[],"title":"Lesson 4 - Introduction to Python"},{"content":"In this guide, you will learn how to set up PostgreSQL 14.7 on your MacBook using Homebrew, a widely-used package manager for macOS. The steps are straightforward and include:\nDetails\rSomething small enough to escape casual notice. ","date":"2023-09-07","id":8,"permalink":"/docs/python/python-basics/lesson-5-introduction-to-python/","summary":"\u003cp\u003eIn this guide, you will learn how to set up PostgreSQL 14.7 on your MacBook using Homebrew, a widely-used package manager for macOS. The steps are straightforward and include:\u003c/p\u003e","tags":[],"title":"Lesson 5 - Introduction to Python"},{"content":"Well-thought-through product announcements will help increase feature awareness and engage users with new functionality. Just like sharing your public roadmap, it\u0026rsquo;s also a great way to let potential customers see that you\u0026rsquo;re constantly improving.\nFurther reading Read How to announce product updates and features ","date":"2023-09-07","id":9,"permalink":"/blog/example-post/","summary":"You can use blog posts for announcing product updates and features.","tags":[],"title":"Example Post"},{"content":"","date":"2023-09-07","id":10,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"Python is one of the most powerful programming languages, widely used in data science, machine learning, and big data analytics. Installing Python is essential for all programmers. As a novice programmer, you may wonder how to install or update Python on your Mac properly. Here, we’ll walk through the different ways of installing and updating Python on macOS.\nThen, to write and run our Python code in an integrated development environment (IDE), we will learn how to install and configure Visual Studio Code on Mac. There are different methods for installing and updating Python on Mac, but let’s stick to the third principle of the Zen of Python that says: “Simple is better than complex.” Accordingly, we will try simple methods rather than complex ones. Before we jump into learning how to install or update Python on Mac, let’s review what we’re going to discuss in this tutorial:\nInstalling and updating Python on Mac Installing Visual Studio Code on Mac Running our first Python script on Mac Installing and Updating Python on Mac I have two pieces of news for you: one is good, the other bad. The good news is that for the sake of compatibility with legacy systems, Python 2.7 is pre-installed on your Mac. The bad news is that Python 2.7 has been retired. Therefore, it isn\u0026rsquo;t recommended for new developments. If you want to take advantage of the new Python version with its many features and improvements, you need to install the latest Python alongside the version that comes pre-installed on macOS.\nBefore we start installing the latest version of Python, let’s see why there are different versions of the same programming language. All programming languages evolve by adding new features over time. The programming language developers announce these changes and improvements by increasing the version number.\nInstall Python 3 as a Part of the Command Line Developer Tools To check the current version of Python that is already installed, open the Terminal application by pressing Command + Space, typing Terminal, and hitting Return. Now, type the following command and hit Return:\npython --version\rYou’ll likely see:\nPython 2.7.18\rNext, try this command to check if Python 3 is installed on your Mac:\npython3 --version\rIf Python 3 isn’t installed, you may see this message:\nxcode-select: note: no developer tools were found at \u0026#39;/Applications/Xcode.app\u0026#39;, requesting install. Choose an option in the dialog to download the command line developer tools.\rA dialog box will appear, stating that this command requires the Command Line Developer Tools. Let’s briefly explain: this package includes tools mostly used in development, such as make, git, python3, etc. Although there are other ways to install Python 3.x on Mac, I recommend installing the Command Line Developer Tools because it provides many additional tools for development.\nTo install the tools:\nClick the Install button in the dialog box. Follow the steps to complete the installation process. After installation, rerun the command to confirm Python 3 installation:\npython3 --version\rYou should see something like:\nPython 3.8.9\rInstall Python 3 with the Official Installer Downloading the latest Python version from the official Python website is another method. Here’s how:\nVisit python.org/downloads. The website detects your operating system and displays a button to download the latest Python installer for macOS. If it doesn’t, click macOS and select the latest release.\nDouble-click the downloaded package to start the installation process. Follow the wizard to complete the installation. Usually, the default settings work well. You may need to enter your Mac password to agree to the installation.\nNote: If you’re using an Apple M1 Mac, you need to install Rosetta. Rosetta enables Intel-based features to run on Apple silicon Macs.\nOnce the installation completes, the Python folder will open automatically.\nVerify the installation by double-clicking IDLE (Python’s built-in IDE). If everything works correctly, IDLE will show the Python shell:\nWrite and run a simple Python program in IDLE. Type the following code:\nprint(\u0026#34;Hello, World!\u0026#34;)\rInstalling Visual Studio Code on Mac Although we can use IDLE or the terminal for writing Python scripts, a powerful, extensible, and lightweight code editor like Visual Studio Code (VS Code) is preferred.\nDownload VS Code for macOS from the official website.\nDouble-click the downloaded file to extract its contents.\nMove the extracted Visual Studio Code application to the Applications folder.\nLaunch VS Code and open a folder where your Python scripts will reside. For example, create a new folder on your Desktop, name it py_scripts, and open it in VS Code.\nCreate a new file with a .py extension (e.g., prog_01.py). VS Code will detect the .py extension and prompt you to install the Python extension.\nInstall the Python extension by clicking the Install button.\nSelect the Python interpreter by clicking on the Select Python Interpreter button.\nRunning Our First Python Script on Mac Now that everything is set up, let’s write and run a Python script in VS Code.\nWrite the following code in the .py file you created:\nprint(\u0026#34;Hello, World!\u0026#34;) name = input(\u0026#34;What\u0026#39;s your name? \u0026#34;) print(\u0026#34;Hello, {}!\\nWelcome to Dataquest!\u0026#34;.format(name))\rRun the code by clicking the ▶️ button in the top-right corner of VS Code. The output will appear in the integrated terminal. First, it will display:\nHello, World!\rThen it will ask for your name. Enter your name and hit Return. It will output:\nHello \u0026lt;your name\u0026gt;! Welcome to Dataquest!\rConclusion In this tutorial, we learned how to install and update Python on macOS, install and configure Visual Studio Code for Python development, and run our first Python script. In the next tutorial, we’ll explore Python virtual environments and how to use them. Congratulations, Pythonista!\n","date":"2023-09-07","id":11,"permalink":"/docs/reference/installing-python-on-macos/","summary":"\u003cp\u003ePython is one of the most powerful programming languages, widely used in data science, machine learning, and big data analytics. Installing Python is essential for all programmers. As a novice programmer, you may wonder how to install or update Python on your Mac properly. Here, we’ll walk through the different ways of installing and updating Python on macOS.\u003c/p\u003e","tags":[],"title":"Installing Python on MacOS"},{"content":"Visual Studio Code is a powerful, extensible, and lightweight code editor that has become one of the preferred code editors in the Python community.\nIn this tutorial, we\u0026rsquo;ll learn how to install Visual Studio Code and set it up for Python development, as well as how to become more productive with VS Code.\nLet’s dive in!\nInstalling Visual Studio Code This section will cover how to install VS Code on macOS step by step. Let’s get started.\nNOTE Due to the essential differences between Windows and macOS, Windows users need to do minor modifications to install VS Code. However, installing VS Code on Windows is straightforward and similar to installing other Windows applications.\nSteps to Install Visual Studio Code Download Visual Studio Code First, download Visual Studio Code for macOS or Windows from its official website. The download page detects your operating system automatically and displays a big button for downloading the latest version of the Python installer on your computer. If it doesn’t, click the arrow-down button and choose the stable VS Code release that matches the operating system installed on your computer:\nExtract the Archived Contents Double-click the downloaded file to extract the archived contents:\nMove the Application to the Applications Folder Move the Visual Studio Code application to the Applications folder to make it available in the macOS launchpad:\nLaunch Visual Studio Code Launch Visual Studio Code, and then open a folder where your Python scripts exist or create a new one. For example, create a new folder on your Desktop and name it py_scripts. Then try to open the folder in VS Code.\nUsually, VS Code needs your permission to access files in your Desktop folder. Click OK:\nYou may also need to declare that you trust the authors of the files stored in your Desktop folder:\nCreate a New File Create a new file with a .py extension. For example, create a new file and name it prog_01.py. VS Code detects the .py extension and suggests installing a Python extension:\nTo work with Python inside VS Code, we need to use the Python extension, which brings many useful features, such as code completion with IntelliSense, debugging, unit testing support, and more:\nInstall the Python Extension Click Install to install the Python extension:\nBrowse Extensions if Needed You can also install the Python extension by browsing extensions. Click the Extensions icon on the left side of VS Code:\nThis will show you a list of the most popular VS Code extensions on the VS Code Marketplace. Select the Python extension and install it:\nSelect a Python Interpreter Once the extension is installed, you have to select a Python interpreter. Click Select Python Interpreter:\nThen select the recommended Python interpreter on the list:\nIf you have multiple Python versions installed on your Mac, choose the latest version:\nYou can also select a Python interpreter using the Python: Select Interpreter command from the Command Palette. To do so, press CMD + SHIFT + P, type \u0026ldquo;Python,\u0026rdquo; and choose Select Interpreter.\nCreating and Running a Python File in VS Code Now that we have everything set up, let’s write and run Python code inside VS Code.\nExample Code Write the following code in VS Code:\ndef palindrome(a): a = a.upper() return a == a[::-1] name = input(\u0026#34;Enter a name: \u0026#34;) if palindrome(name): print(\u0026#34;It\u0026#39;s a palindrome name.\u0026#34;) else: print(\u0026#34;It\u0026#39;s not a palindrome name.\u0026#34;)\rRun the Code Run the code by clicking the ▶️ button in the top-right corner of VS Code.\nFirst, it asks for a name in the integrated terminal. Enter a name and press Return. If the entered name is a palindrome (e.g., Hannah, Anna, or Bob), the output will be: It\u0026#39;s a palindrome name.\rOtherwise, it will output: It\u0026#39;s not a palindrome name.\rUsing the Integrated Terminal As you’ve seen, all outputs from the program appear in the integrated terminal. Let’s explore this feature further.\nVisual Studio Code brings great convenience by embedding this feature into the IDE because executing terminal commands is an essential part of writing code.\nHow to Access the Terminal Open the terminal using the shortcut: Hold down the Ctrl key. Press the backtick key once. The terminal should appear at the bottom of your VS Code window. Or navigate to the View \u0026gt; Terminal menu option. Terminal Features Kill the Terminal: Click the bin icon in the top-right of the terminal window. The integrated terminal uses your system’s installed shells, such as: PowerShell or Command Prompt on Windows. Bash or Zsh on macOS and Linux. Customizing the Terminal Open the terminal settings page.\nClick the arrow-down button in the top-right corner of the terminal window.\nSelect Configure Terminal Settings to customize font, spacing, and cursor style:\nSwitching Between Shells Click the arrow-down button in the terminal window.\nSelect the Select Default Profile option:\nA pre-populated list of available shells will appear. Select your preferred default shell, such as Bash:\nOnce you create a new terminal (by clicking the plus icon in the terminal window), it will open using the selected shell:\nUsing the REPL Another useful feature of VS Code is running single or multiple lines of Python code using the REPL (Read, Evaluate, Print, Loop).\nHow to Use REPL Write the following statement in your Python file:\nprint(\u0026#34;Hello, world!\u0026#34;)\rSelect the statement, right-click, and choose Run Selection/Line in Python Terminal:\nOutput in REPL The output will appear in the integrated terminal, but in a special format known as REPL.\nWhat is REPL?\nREPL stands for Read, Evaluate, Print, Loop. It provides an interactive way to run commands within the terminal. The three arrows (\u0026gt;\u0026gt;\u0026gt;) indicate an input line in REPL. Starting REPL Directly Open the Command Palette (CMD + SHIFT + P).\nSearch for \u0026ldquo;REPL\u0026rdquo; and click on Python: Start REPL:\nThe interactive Python shell will appear. You can enter commands at the \u0026gt;\u0026gt;\u0026gt; prompt and see instant results:\nREPL is great for testing small pieces of code or experimenting with APIs.\nFormatting Python Code When writing Python programs, it’s important to follow proper formatting guidelines. Python has a well-known style guide called PEP 8, which makes your code easier to read and understand.\nAutomatic Formatting with autopep8 To automatically format your code in VS Code, use the autopep8 package.\nInstall autopep8 Open the integrated terminal and execute the following command:\npip3 install autopep8\rConfigure autopep8 in VS Code\nOpen the settings in VS Code.\nSearch for Python formatting.\nSet both Autopep8 Path and Provider to autopep8:\nEnable Format on Save\nSearch for Format On Save in the settings.\nCheck the Format On Save option:\nEnabling this option applies all PEP 8 rules automatically whenever you save a Python file.\nRefactoring Python Code What is Refactoring? Refactoring is the process of restructuring code without changing its external behavior to improve readability and maintainability.\nVS Code provides basic refactoring tools through the Python extension, including:\nRename Symbol Extract Method Extract Variable Example: Rename Symbol To rename a function, right-click on its name and choose Rename Symbol. For example:\nRename palindrome() to check_palindrome().\nEnter the new name in the text box and press Enter:\nAll occurrences of palindrome will be replaced with check_palindrome:\nExample: Extract Method Create a Python file with the following code:\nheight = 5 width = 4 area = height * width print(\u0026#34;Room\u0026#39;s area =\u0026#34;, area, \u0026#34;square meters\u0026#34;)\rSelect the third line, right-click, and choose Refactor from the context menu:\nClick Extract Method and enter the new name (e.g., calc_area):\nPython Interactive Window VS Code supports working with Jupyter Notebooks.\nRight-click on a Python file and select Run Current File in Interactive Window:\nIf the Jupyter package isn’t installed, a dialog box will prompt you to install it:\nOnce installed, an interactive window will appear, allowing you to run the file interactively.\nYou can also create new Jupyter Notebooks in VS Code:\nOpen the Command Palette.\nSelect Jupyter: Create New Jupyter Notebook:\nConclusion This tutorial covered installing and configuring VS Code, running Python files, and using additional features like REPL, formatting, refactoring, and Jupyter integration.\nWhile we’ve covered a lot, there’s even more to explore in VS Code to enhance your productivity. Dive deeper into its documentation to make the most out of this powerful editor!\n","date":"2023-09-07","id":12,"permalink":"/docs/reference/how-to-set-up-visual-studio-code/","summary":"\u003cp\u003eVisual Studio Code is a powerful, extensible, and lightweight code editor that has become one of the preferred code editors in the Python community.\u003c/p\u003e","tags":[],"title":"How to Set Up Visual Studio Code"},{"content":"Python is a popular open-source, high-level programming language. It\u0026rsquo;s intuitive and offers many helpful tools and libraries — Python is a powerful data science asset to have in your toolkit. To start working with Python, we first need to download it and install it on our operating system (in this case, Windows).\nHow to Install Python on Windows There are two main ways to install Python on Windows:\nInstallation from the official Python website. Installation using Anaconda, a convenient distribution of Python and R programming languages. Choose the official Python installation if you\u0026rsquo;re a programmer working on web development, network programming, or general-purpose software applications. Choose Anaconda if you\u0026rsquo;re focused on data science and machine learning. Anaconda provides: 1500+ built-in Python and R data science packages. Popular Python IDEs like Jupyter Notebook. A graphical user interface (GUI) for ease of use. Step 1: Check if Python is Already Installed Before installing Python, check if it’s already installed on your computer.\nOpen Command Prompt (search cmd in Windows Search) or Windows PowerShell (right-click the Start button and select Windows PowerShell). Type: python -V\rThis command shows the installed Python version (if any). To check the installation path, type: where.exe python\rStep 2: Install Python from the Official Website If Python isn’t installed, follow these steps to download and install it from the official Python website.\nDownload Python Open the Python Releases for Windows page. Select your desired Python version. Download the Python executable installer. Decide Between Python 2 and Python 3 Python 3 (released in 2008):\nSimpler syntax. Extensive libraries, especially for data science. Actively supported by the Python community. Python 2 (no longer supported):\nMay be required for legacy projects or older scripts. For new projects, Python 3 is recommended. If you need Python 2, download the Windows x86-64 MSI installer to match your Windows architecture.\nTo download Python 3, choose the appropriate installer for your Windows version:\nInstall Python 2 Run the downloaded Python 2 installer. Select the default options during installation. Install Python 3 Run the Python 3 installer. On the first screen: Check \u0026ldquo;Add Python to PATH.\u0026rdquo; Click \u0026ldquo;Install Now.\u0026rdquo; After installation, select \u0026ldquo;Disable Path Length Limit.\u0026rdquo; Step 3: Verify Python Installation Open Command Prompt. Type: python -V\rIf both Python 2 and Python 3 are installed, Python 2 may take priority. To check Python 3, type: python3 -V\rStep 4: Install Python Using Anaconda Navigator For data science or machine learning, installing Python through Anaconda Navigator is recommended.\nOpen the Anaconda Individual Edition page. Download the Windows installer. Run the installer and follow the default options. Step 5: Run Python Using the Official Installation Search for IDLE in Windows Search. Open the desired version of IDLE. Start coding in Python. Using Anaconda Open Anaconda Navigator. Select an application, like Jupyter Notebook. Create and run a new Python notebook. Step 6: Update Python From the Official Website Visit the Python Releases for Windows page, download the latest version, and run the installer.\nUsing Anaconda Open Anaconda Prompt. Type: conda update python\rTo create a new virtual environment with the latest Python version:\nconda create -n python_latest python=3.10 conda activate python_latest\rConclusion In this tutorial, we covered:\nChecking for Python installations. Installing Python from the official website or using Anaconda. Running Python scripts on Windows. Updating Python to the latest version. Now, you’re ready to start coding in Python!\n","date":"2023-09-07","id":13,"permalink":"/docs/reference/installing-python-on-windows/","summary":"\u003cp\u003ePython is a popular open-source, high-level programming language. It\u0026rsquo;s intuitive and offers many helpful tools and libraries — Python is a powerful data science asset to have in your toolkit. To start working with Python, we first need to download it and install it on our operating system (in this case, Windows).\u003c/p\u003e","tags":[],"title":"Installing Python on Windows"},{"content":" I am adding new content to the Datatweets website at the moment, I will update it ASAP. ~ Mehdi\n","date":"2023-09-07","id":14,"permalink":"/docs/courses/","summary":"\u003csvg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"currentColor\"\n  stroke-width=\"2\"\n  stroke-linecap=\"round\"\n  stroke-linejoin=\"round\"\n \n class=\"outline/coffee svg-inline\" id=\"svg-coffee\" role=\"img\"\u003e\n  \u003cpath stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/\u003e\n  \u003cpath d=\"M3 14c.83 .642 2.077 1.017 3.5 1c1.423 .017 2.67 -.358 3.5 -1c.83 -.642 2.077 -1.017 3.5 -1c1.423 -.017 2.67 .358 3.5 1\" /\u003e\n  \u003cpath d=\"M8 3a2.4 2.4 0 0 0 -1 2a2.4 2.4 0 0 0 1 2\" /\u003e\n  \u003cpath d=\"M12 3a2.4 2.4 0 0 0 -1 2a2.4 2.4 0 0 0 1 2\" /\u003e\n  \u003cpath d=\"M3 10h14v5a6 6 0 0 1 -6 6h-2a6 6 0 0 1 -6 -6v-5z\" /\u003e\n  \u003cpath d=\"M16.746 16.726a3 3 0 1 0 .252 -5.555\" /\u003e\n\u003c/svg\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI am adding new content to the Datatweets website at the moment, I will update it ASAP.\n~ Mehdi\u003c/p\u003e","tags":[],"title":"Courses"},{"content":"","date":"2023-09-07","id":15,"permalink":"/docs/reference/","summary":"","tags":[],"title":"Reference"},{"content":"In this guide, you will learn how to set up PostgreSQL 14.7 on your MacBook using Homebrew, a widely-used package manager for macOS. The steps are straightforward and include:\nInstall Homebrew Install PostgreSQL Download the Northwind PostgreSQL SQL file Create a New PostgreSQL Database Import the Northwind SQL file Verify the Northwind database installation Connect to the Database Using Jupyter Notebook Prerequisites Ensure you have a MacBook or iMac running macOS 10.13 or later.\nInstall Xcode Command Line Tools To start, you need to install the Xcode Command Line Tools, which are essential for software development on your Mac.\nOpen the Terminal app (located in Applications \u0026gt; Utilities) and enter the command: xcode-select --install\rA pop-up window will prompt you to install the Command Line Tools. Click \u0026ldquo;Install\u0026rdquo; to proceed. After installation is complete, move on to the next step. Step 1: Install Homebrew With the Xcode Command Line Tools installed, you can now install Homebrew. Homebrew is a package manager for macOS that simplifies the installation of software packages like PostgreSQL.\nAfter installing Homebrew, it’s important to add it to your system’s PATH. This tells the system where to find the Homebrew executables, allowing you to run Homebrew commands from any location in your Terminal.\n1. Install Homebrew Copy and paste the following command into the Terminal app. The script will automatically download and install Homebrew on your Mac. You might be asked to enter your admin password during the installation process.\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34;\rAfter the installation, you will see a message saying, \u0026ldquo;Installation successful!\u0026rdquo;\n2. Add Homebrew to Your PATH To complete the installation, add Homebrew to your PATH:\n(echo; echo \u0026#39;eval \u0026#34;$(/opt/homebrew/bin/brew shellenv)\u0026#34;\u0026#39;) \u0026gt;\u0026gt; /Users/your_username/.zprofile\rReplace /Users/your_username with your actual user directory.\n3. Load Homebrew Environment Variables Run the following command to load the Homebrew environment variables into your current Terminal session:\neval \u0026#34;$(/opt/homebrew/bin/brew shellenv)\u0026#34;\r4. Verify the Installation To confirm Homebrew is installed correctly, run:\nbrew --version\rThis should display the Homebrew version number.\nStep 2: Install PostgreSQL In this step, you will use Homebrew to install PostgreSQL on your macOS system.\n1. Ensure Homebrew is Installed Make sure you have Homebrew installed. If not, refer to the previous section to install it.\n2. Update Homebrew Update Homebrew to ensure you have the latest package information:\nbrew update\r3. Install PostgreSQL 14 Install PostgreSQL 14 using Homebrew:\nbrew install postgresql@14\r4. Start PostgreSQL Service After installation, start the PostgreSQL service:\nbrew services start postgresql@14\rYou should see a message indicating that PostgreSQL has started successfully.\n5. Verify PostgreSQL Installation Check the PostgreSQL version to ensure it’s installed correctly:\npsql --version\r6. Create a PostgreSQL User Create a new PostgreSQL user named postgres with superuser privileges:\ncreateuser -s postgres\r7. Set a Password for the postgres User Set a password for the postgres user:\npsql \\password postgres\r8. Configure PostgreSQL Environment Add PostgreSQL to your PATH by adding the following line to your shell profile (~/.zshrc or ~/.bash_profile):\nexport PATH=\u0026#34;/usr/local/opt/postgresql@14/bin:$PATH\u0026#34;\rThen, reload your profile:\nsource ~/.zshrc # or source ~/.bash_profile\r9. Troubleshooting Tips If the PostgreSQL service does not start, check the logs for errors:\ntail -f /usr/local/var/log/postgres.log\rEnsure your system has enough resources and dependencies for PostgreSQL.\nStep 3: Download the Northwind PostgreSQL SQL File The Northwind database is a sample database originally provided by Microsoft. It contains data on customers, orders, products, suppliers, and other aspects of a fictitious company named \u0026ldquo;Northwind Traders\u0026rdquo;. We will use a version of Northwind adapted for PostgreSQL.\n1. Open Terminal 2. Create a New Directory Create a new directory for the Northwind database and navigate to it:\nmkdir northwind \u0026amp;\u0026amp; cd northwind\r3. Download the SQL File Download the Northwind PostgreSQL SQL file using curl:\ncurl -O https://raw.githubusercontent.com/pthom/northwind_psql/master/northwind.sql\rStep 4: Create a New PostgreSQL Database Now that you have downloaded the Northwind SQL file, it’s time to create a new database on your PostgreSQL server.\n1. Connect to PostgreSQL Server Connect as the postgres user:\npsql -U postgres\r2. Create Database Create a new database called northwind:\nCREATE DATABASE northwind;\r3. Exit PostgreSQL Interface Exit the psql command-line interface:\n\\q\rStep 5: Import the Northwind SQL File Import the Northwind SQL file into the northwind database.\n1. Ensure You’re in the Correct Directory Ensure you’re in the northwind directory where the northwind.sql file is located.\n2. Import the SQL File Run the following command to import the Northwind SQL file into the northwind database:\npsql -U postgres -d northwind -f northwind.sql\rStep 6: Verify the Northwind Database Installation Verify that the Northwind database has been installed correctly.\n1. Connect to the northwind Database Connect using psql:\npsql -U postgres -d northwind\r2. List Tables List the tables in the Northwind database:\n\\dt\rYou should see a list of Northwind tables.\n3. Run a Sample Query Query the customers table to ensure data has been imported correctly:\nSELECT * FROM customers LIMIT 5;\r4. Exit the psql Interface Exit the command-line interface:\n\\q\rCongratulations! You have successfully installed the Northwind database in PostgreSQL using an SQL file and psql.\nStep 7: Connect to the Database Using Jupyter Notebook Jupyter Notebook is a great tool for executing SQL queries and analyzing the Northwind database.\n1. Install ipython-sql Install the ipython-sql package:\n!pip install ipython-sql\r2. Load SQL Extension Load the SQL extension:\n%load_ext sql\r3. Connect to the Northwind Database Establish a connection:\n%sql postgresql://postgres@localhost:5432/northwind\rOn Windows, you may need to include the password:\n%sql postgresql://postgres:{password}@localhost:5432/northwind\r4. Run the Cell Run the cell by either clicking the \u0026ldquo;Run\u0026rdquo; button or using the keyboard shortcut Shift + Enter or Ctrl + Enter.\n5. Verify Connection You should see an output confirming the connection:\n\u0026#39;Connected: postgres@northwind\u0026#39;\rNext Steps Based on what you’ve accomplished, here are some next steps to continue your learning journey:\nDeepen Your SQL Knowledge:\nFormulate more complex queries on the Northwind database. Understand the design of the Northwind database. Experiment with Database Management:\nLearn how to backup and restore databases in PostgreSQL. Explore ways to optimize your PostgreSQL database performance. Integration with Python:\nUse psycopg2, a popular PostgreSQL adapter for Python. Experiment with ORM libraries like SQLAlchemy to manage your database using Python. Security and Best Practices:\nLearn about database security principles and apply them to your PostgreSQL setup. Understand best practices for storing sensitive information. This blog post provides a comprehensive guide to installing PostgreSQL 14.7 on macOS using Homebrew, importing the Northwind database, and connecting to it using Jupyter Notebook.\n","date":"2023-09-07","id":16,"permalink":"/docs/reference/install-postgresql-14.7-for-macos/","summary":"\u003cp\u003eIn this guide, you will learn how to set up PostgreSQL 14.7 on your MacBook using Homebrew, a widely-used package manager for macOS. The steps are straightforward and include:\u003c/p\u003e","tags":[],"title":"Install PostgreSQL 14.7 for macOS"},{"content":"Introduction In this tutorial, you\u0026rsquo;ll learn how to install PostgreSQL 14.7 on Windows 10.\nThe process is straightforward and consists of the following steps:\nInstall PostgreSQL Configure Environment Variables Verify the Installation Download the Northwind PostgreSQL SQL file Create a New PostgreSQL Database Import the Northwind SQL file Verify the Northwind database installation Connect to the Database Using Jupyter Notebook Prerequisites A computer running Windows 10 Internet connection Download the official PostgreSQL 14.7 at https://get.enterprisedb.com/postgresql/postgresql-14.7-2-windows-x64.exe Save the installer executable to your computer and run the installer. Note: We recommend version 14.7 because it is commonly used. There are newer versions available, but their features vary substantially!\nStep 1: Install PostgreSQL We\u0026rsquo;re about to initiate a vital part of this project - installing and configuring PostgreSQL.\nThroughout this process, you\u0026rsquo;ll define critical settings like the installation directory, components, data directory, and the initial \u0026lsquo;postgres\u0026rsquo; user password. This password grants administrative access to your PostgreSQL system. Additionally, you\u0026rsquo;ll choose the default port for connections and the database cluster locale.\nEach choice affects your system\u0026rsquo;s operation, file storage, available tools, and security. We\u0026rsquo;re here to guide you through each decision to ensure optimal system functioning.\nIn the PostgreSQL Setup Wizard, click Next to begin the installation process. Accept the default installation directory or choose a different directory by clicking Browse. Click Next to continue. Choose the components you want to install (e.g., PostgreSQL Server, pgAdmin 4 (optional), Stack Builder (optional), Command Line Tools),no characters will appear on the screen as you type your password and click Next. Select the data directory for storing your databases and click Next. Set a password for the PostgreSQL “postgres” user and click Next. There will be some points where you\u0026rsquo;re asked to enter a password in the command prompt. It\u0026rsquo;s important to note that for security reasons, as you type your password, no characters will appear on the screen. This standard security feature is designed to prevent anyone from looking over your shoulder and seeing your password. So, when you\u0026rsquo;re prompted for your password, don\u0026rsquo;t be alarmed if you don\u0026rsquo;t see any response on the screen as you type. Enter your password and press \u0026lsquo;Enter\u0026rsquo;. Most systems will allow you to re-enter the password if you make a mistake. Remember, it\u0026rsquo;s crucial to remember the password you set during the installation, as you\u0026rsquo;ll need it to connect to your PostgreSQL databases in the future. Choose the default port number (5432) or specify a different port, then click Next. Select the locale to be used by the new database cluster and click Next. Review the installation settings and click Next to start the installation process. The installation may take a few minutes. Once the installation is complete, click Finish to close the Setup Wizard. Step 2: Configure Environment Variables Next, we\u0026rsquo;re going to configure environment variables on your Windows system. Why are we doing this? Well, environment variables are a powerful feature of operating systems that allow us to specify values - like directory locations - that can be used by multiple applications. In our case, we need to ensure that our system can locate the PostgreSQL executable files stored in the \u0026ldquo;bin\u0026rdquo; folder of the PostgreSQL directory.\nBy adding the PostgreSQL \u0026ldquo;bin\u0026rdquo; folder path to the system\u0026rsquo;s PATH environment variable, we\u0026rsquo;re telling our operating system where to find these executables. This means you\u0026rsquo;ll be able to run PostgreSQL commands directly from the command line, no matter what directory you\u0026rsquo;re in, because the system will know where to find the necessary files. This makes working with PostgreSQL more convenient and opens up the possibility of running scripts that interact with PostgreSQL.\nNow, let\u0026rsquo;s get started with the steps to configure your environment variables on Windows!\nOn the Windows taskbar, right-click the Windows icon and select System. Click on Advanced system settings in the left pane. In the System Properties dialog, click on the Environment Variables button. Under the System Variables section, scroll down and find the Path variable. Click on it to select it, then click the Edit button. In the Edit environment variable dialog, click the New button and add the path to the PostgreSQL bin folder, typically C:\\Program Files\\PostgreSQL\\14\\bin. Click OK to close the \u0026ldquo;Edit environment variable\u0026rdquo; dialog, then click OK again to close the \u0026ldquo;Environment Variables\u0026rdquo; dialog, and finally click OK to close the \u0026ldquo;System Properties\u0026rdquo; dialog. Step 3: Verify the Installation After going through the installation and configuration process, it\u0026rsquo;s essential to verify that PostgreSQL is correctly installed and accessible. This gives us the assurance that the software is properly set up and ready to use, which can save us from troubleshooting issues later when we start interacting with databases.\nIf something went wrong during installation, this verification process will help you spot the problem early before creating or managing databases.\nNow, let\u0026rsquo;s go through the steps to verify your PostgreSQL installation.\nOpen the Command Prompt by pressing Win + R, typing cmd, and pressing Enter. Type psql --version and press Enter. You should see the PostgreSQL version number you installed if the installation was successful. To connect to the PostgreSQL server, type psql -U postgres and press Enter. When prompted, enter the password you set for the postgres user during installation. You should now see the postgres=# prompt, indicating you are connected to the PostgreSQL server. Step 4: Download the Northwind PostgreSQL SQL File Now, we\u0026rsquo;re going to introduce you to the Northwind database and help you download it. The Northwind database is a sample database originally provided by Microsoft for its Access Database Management System. It\u0026rsquo;s based on a fictitious company named \u0026ldquo;Northwind Traders,\u0026rdquo; and it contains data on their customers, orders, products, suppliers, and other aspects of the business. In our case, we\u0026rsquo;ll be working with a version of Northwind that has been adapted for PostgreSQL.\nThe following steps will guide you on how to download this PostgreSQL-compatible version of the Northwind database from GitHub to your local machine. Let\u0026rsquo;s get started:\nFirst, you need to download a version of the Northwind database that\u0026rsquo;s compatible with PostgreSQL. You can find an adapted version on GitHub. To download the SQL file, follow these steps:\nOpen your Terminal application.\nCreate a new directory for the Northwind database and navigate to it:\nmkdir northwind \u0026amp;\u0026amp; cd northwind\rDownload the Northwind PostgreSQL SQL file using curl:\ncurl -O https://raw.githubusercontent.com/pthom/northwind_psql/master/northwind.sql\rThis will download the northwind.sql file to the northwind directory you created.\nStep 5: Create a New PostgreSQL Database Now that we\u0026rsquo;ve downloaded the Northwind SQL file, it\u0026rsquo;s time to prepare our PostgreSQL server to host this data. The next steps will guide you in creating a new database on your PostgreSQL server, a crucial prerequisite before importing the Northwind SQL file.\nStep 5: Create a New PostgreSQL Database (continued) Creating a dedicated database for the Northwind data is good practice as it isolates these data from other databases in your PostgreSQL server, facilitating better organization and management of your data. These steps involve connecting to the PostgreSQL server as the postgres user, creating the northwind database, and then exiting the PostgreSQL command-line interface.\nLet\u0026rsquo;s proceed with creating your new database:\nConnect to the PostgreSQL server as the postgres user:\npsql -U postgres\rCreate a new database called northwind:\nCREATE DATABASE northwind;\rExit the psql command-line interface:\n\\q\rStep 6: Import the Northwind SQL File We\u0026rsquo;re now ready to import the Northwind SQL file into our newly created northwind database. This step is crucial as it populates our database with the data from the Northwind SQL file, which we will use for our PostgreSQL learning journey.\nThese instructions guide you through the process of ensuring you\u0026rsquo;re in the correct directory in your Terminal and executing the command to import the SQL file. This command will connect to the PostgreSQL server, target the northwind database, and run the SQL commands contained in the northwind.sql file.\nLet\u0026rsquo;s move ahead and breathe life into our northwind database with the data it needs!\nWith the northwind database created, you can import the Northwind SQL file using psql. Follow these steps:\nIn your Terminal, ensure you\u0026rsquo;re in the northwind directory where you downloaded the northwind.sql file.\nRun the following command to import the Northwind SQL file into the northwind database:\npsql -U postgres -d northwind -f northwind.sql\rThis command connects to the PostgreSQL server as the postgres user, selects the northwind database, and executes the SQL commands in the northwind.sql file.\nStep 7: Verify the Northwind Database Installation You\u0026rsquo;ve successfully created your northwind database and imported the Northwind SQL file. Next, we must ensure everything was installed correctly, and our database is ready for use.\nThese upcoming steps will guide you on connecting to your northwind database, listing its tables, running a sample query, and finally, exiting the command-line interface. Checking the tables and running a sample query will give you a sneak peek into the data you now have and verify that the data was imported correctly. This means we can ensure everything is in order before diving into more complex operations and analyses.\nTo verify that the Northwind database has been installed correctly, follow these steps:\nConnect to the northwind database using psql:\npsql -U postgres -d northwind\rList the tables in the Northwind database:\n\\dt\rYou should see a list of Northwind tables: categories, customers, employees, orders, and more.\nRun a sample query to ensure the data has been imported correctly. For example, you can query the customers table:\nSELECT * FROM customers LIMIT 5;\rThis should return the first five rows from the customers table.\nExit the psql command-line interface:\n\\q\rCongratulations! You\u0026rsquo;ve successfully installed the Northwind database in PostgreSQL using an SQL file and psql.\nStep 8: Connect to the Database Using Jupyter Notebook As we wrap up our installation, we will now introduce Jupyter Notebook as one of the tools available for executing SQL queries and analyzing the Northwind database. Jupyter Notebook offers a convenient and interactive platform that simplifies the visualization and sharing of query results, but it\u0026rsquo;s important to note that it is an optional step. You can also access Postgres through other means. However, we highly recommend using Jupyter Notebook for its numerous benefits and enhanced user experience.\nTo set up the necessary tools and establish a connection to the Northwind database, here is an overview of what each step will do:\n!pip install ipython-sql: This command installs the ipython-sql package. This package enables you to write SQL queries directly in your Jupyter Notebook, making it easier to execute and visualize the results of your queries within the notebook environment.\n%sql postgresql://postgres@localhost:5432/northwind: This command establishes a connection to the Northwind database using the PostgreSQL database system. The connection string has the following format:\npostgresql://username@hostname:port/database_name\rIn this case, username is postgres, hostname is localhost, port is 5432, and database_name is northwind. The %sql magic command allows you to run a single-line SQL query in the Jupyter Notebook.\nCopy the following text into a code cell in the Jupyter Notebook:\n!pip install ipython-sql %load_ext sql %sql postgresql://postgres@localhost:5432/northwind\rOn Windows you may need to try the following command because you need to provide the password you set for the “postgres” user during installation:\n%sql postgresql://postgres:{password}@localhost:5432/northwind\rBear in mind that it\u0026rsquo;s considered best practice not to include sensitive information like passwords directly in files that could be shared or accidentally exposed. Instead, you can store your password securely using environment variables or a password management system (we\u0026rsquo;ll link to some resources at the end of this guide if you are interested in doing this).\nRun the cell by either:\nClicking the \u0026ldquo;Run\u0026rdquo; button on the menu bar. Using the keyboard shortcut: Shift + Enter or Ctrl + Enter. Upon successful connection, you should see an output similar to the following:\n\u0026#39;Connected: postgres@northwind\u0026#39;\rThis output confirms that you are now connected to the Northwind database, and you can proceed with the guided project in your Jupyter Notebook environment.\nOnce you execute these commands, you\u0026rsquo;ll be connected to the Northwind database, and you can start writing SQL queries in your Jupyter Notebook using the %sql or %%sql magic commands.\nNext Steps Based on what you\u0026rsquo;ve accomplished, here are some potential next steps to continue your learning journey:\nDeepen Your SQL Knowledge:\nTry formulating more complex queries on the Northwind database to improve your SQL skills. These could include joins, subqueries, and aggregations. Understand the design of the Northwind database: inspect the tables, their relationships, and how data is structured. Experiment with Database Management:\nLearn how to backup and restore databases in PostgreSQL. Try creating a backup of your Northwind database. Explore different ways to optimize your PostgreSQL database performance like indexing and query optimization. Integration with Python:\nLearn how to use psycopg2, a popular PostgreSQL adapter for Python, to interact with your database programmatically. Experiment with ORM (Object-Relational Mapping) libraries like SQLAlchemy to manage your database using Python. Security and Best Practices:\nLearn about database security principles and apply them to your PostgreSQL setup. Understand best practices for storing sensitive information, like using .env files for environment variables. For more guidance on securely storing passwords, you might find the following resources helpful: Using Environment Variables in Python Python Secret Module ","date":"2023-09-07","id":17,"permalink":"/docs/reference/install-postgresql-14.7-on-windows-10/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this tutorial, you\u0026rsquo;ll learn how to install PostgreSQL 14.7 on Windows 10.\u003c/p\u003e\n\u003cp\u003eThe process is straightforward and consists of the following steps:\u003c/p\u003e","tags":[],"title":"Install PostgreSQL 14.7 on Windows 10"},{"content":"Link to valuable, relevant resources.\n","date":"2024-02-27","id":18,"permalink":"/docs/resources/","summary":"\u003cp\u003eLink to valuable, relevant resources.\u003c/p\u003e","tags":[],"title":"Resources"},{"content":"","date":"2023-09-07","id":19,"permalink":"/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2023-09-07","id":20,"permalink":"/docs/guides/","summary":"","tags":[],"title":"Guides"},{"content":"Guides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.\nFurther reading Read about how-to guides in the Diátaxis framework ","date":"2023-09-07","id":21,"permalink":"/docs/guides/example-guide/","summary":"\u003cp\u003eGuides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.\u003c/p\u003e","tags":[],"title":"Example Guide"},{"content":"","date":"2023-09-07","id":22,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-09-07","id":23,"permalink":"/","summary":"","tags":[],"title":"Welcome to Datatweets"},{"content":"","date":"0001-01-01","id":24,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":25,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":26,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]